DECS heckex USE symbx,basics,lbasics,zbasics,seg1a:
 
 
 
 
{------------------------------------------------------------------------}
PROC getcoord = (SYMB s,INT type)REF[]INT:
BEGIN
INT i= coordindex[type,index(s)];
( i=0 | zerovector | SIGN(i) * coord[ABS(i),] )
END;
 
{------------------------------------------------------------------------}
PROC convertmatrix = (LMATRIX m, INT type)REF[]INT:
BEGIN
      SYMB s = (SHORTEN m[2,1] , SHORTEN m[2,2]);
 
      getcoord( s , type )
END;
 
{------------------------------------------------------------------------}
PROC qtovec = (LQI q)REF[]INT:
BEGIN HEAP[rank]INT ans := zerovector;
      LMATRIX m := lidentity, invmat;
      LQI z := q;
      WHILE NOT (z=linfinity)
      DO LQI newz = ltranslate(z);
         INT type = ltestregion(newz);
         invmat := linv[type];
         m := m ** T((Nz-Nnewz)/Dz) ** invmat;
         z := lapply(invmat,newz);
         ans := ans + convertmatrix(m,type)
      OD;
      ans
END;
 
{------------------------------------------------------------------------}
PROC reconvert = (MODSYM m)REF[]INT:  qtovec(Bm)  - qtovec(Am)  ;
 
{------------------------------------------------------------------------}
OP * = (LMATRIX m, MODSYM s)REF MODSYM: BEGIN HEAP MODSYM ans := (lapply(m,As),lapply(m,Bs)); ans END;
 
REF[,]INT charmat;
 
{------------------------------------------------------------------------}
PROC hitlist = ([]LMATRIX list, MODSYM m)REF[]INT:
BEGIN HEAP[rank] INT ans := zerovector;
      FOR i TO UPB list
      DO ans := ans + reconvert(list[i]*m)
      OD;
      ans
END;
 
{------------------------------------------------------------------------}
OP = = ([,]INT a,b)BOOL:
BEGIN IF 1 UPB a = 1 UPB b AND
         2 UPB a = 2 UPB b AND
         1 LWB a = 1 LWB b AND
         2 LWB a = 2 LWB b
      THEN BOOL ans:= TRUE;
           FOR i FROM 1 LWB a TO 1 UPB a WHILE ans
           DO FOR j FROM 2 LWB a TO 2 UPB a WHILE ans
              DO ans := a[i,j]=b[i,j]
              OD
           OD;
           ans
      ELSE FALSE
      FI
END;
 
{------------------------------------------------------------------------}
PROC getlist1 = (IDEAL p)REF[]LMATRIX:    {p principal}
BEGIN
     INT np = idealnorm(p);
     []GI res = idealresidues(p);
     LGI gen = LENG(gen1 OF p);
     HEAP[np+1]LMATRIX xlist;
     FOR j TO np DO xlist[j] := lmakemat(lone,LENG res[j],lzero,gen) OD;
     xlist[np+1] := lmakemat(gen,lzero,lzero,lone);
     xlist
END;
 
{------------------------------------------------------------------------}
PROC getlist2 = (IDEAL p)REF[]LMATRIX:    {p non-principal: T(p sqd.)}
BEGIN
     IDEAL psq = p*p;
     INT np = idealnorm(p);
     LGI gen = LENG(gen1 OF psq);
     []GI respsq = idealresidues(psq);
     LMATRIX m = isomat2(p,p);
     []GI resp   = idealresidues(p);
     GI a = gen2 OF p;
 
     HEAP[1+np+np*np]LMATRIX xlist;
 
     FOR j TO np*np
     DO xlist[j] := lmakemat(lone,LENG respsq[j],lzero,gen)
     OD;
     INT nlist := np*np;
     FOR j TO np
     DO xlist[nlist+:=1] := (m * lmakemat(gen,LENG(resp[j]*a),lzero,gen))/gen
     OD;
     xlist[nlist+:=1] := lmakemat(gen,lzero,lzero,lone);
     xlist
END;
 
{------------------------------------------------------------------------}
PROC getlist3 = (IDEAL p,q)REF[]LMATRIX:    {p non-principal: T(p.q)}
BEGIN
     INT np = idealnorm(p), nq = idealnorm(q);
     []GI resp = idealresidues(p),
          resq = idealresidues(q);
     IDEAL pq = p*q;
     []GI respq= idealresidues(pq);
     LMATRIX m1 = isomat2(p,q);
     LMATRIX m2 = isomat2(q,p);
     LGI gen = LENG(gen1 OF pq);
 
     HEAP[(1+np)*(1+nq)]LMATRIX xlist;  INT nlist := 0;
 
     FOR j TO np*nq
     DO xlist[nlist+:=1] := lmakemat(lone,LENG(respq[j]),lzero,gen)
     OD;
     FOR j TO np
     DO xlist[nlist+:=1] := m2 * T(LENG resp[j])
     OD;
     FOR j TO nq
     DO xlist[nlist+:=1] := m1 * T(LENG resq[j])
     OD;
     xlist[nlist+:=1] := lmakemat(gen,lzero,lzero,lone);
     xlist
END;
 
{------------------------------------------------------------------------}
PROC calcop = (STRING opname, []LMATRIX list)REF[,]INT:
BEGIN
     [rank,rank]INT mat1;
     [rank,dimension]INT mat2;
     HEAP[dimension,dimension]INT opmat;
 
     FOR j TO rank
     DO mat1[,j] := (needed[j] | hitlist(list,freemods[j]) | zerovector)
     OD;
 
     mat2 := mat1 * tbasis;
     opmat := mat2[codimension+1:rank,];
 
     IF tbasis * opmat = mat2
     THEN print(("Matrix of ",opname));
          print((dimension>1|newline|":"));
          showmatrix(opmat)
     ELSE
          {error: op has not stabilised ker delta}
          print(("Problem in PROC calcop calculating ",opname,newline));
          print((newline,"mat1",newline));showmatrix(mat1);print(newline);
          print((newline,"mat2",newline));showmatrix(mat2);print(newline);
          print((newline,"tbasis",newline));showmatrix(tbasis);print(newline)
     FI;
     opmat
END;
 
{------------------------------------------------------------------------}
PROC character = VOID:
BEGIN
     []LMATRIX list = (oddlmat);
     print((newline,newline));
     charmat := calcop("character",list);
     print((newline,newline))
END;
 
{------------------------------------------------------------------------}
PROC heckeop = (INT i)VOID:
BEGIN
     PRIME pp = primes[i];
     IDEAL  p = ideal OF pp;   STRING namep = name OF pp;
     IDEAL  q = ideal OF primes[pivot];
 
     IF p DIV mod
     THEN print((namep, " divides mod",newline))
     ELSE
         IF PRINC p
         THEN calcop("T(" + namep + ")",getlist1(p))
         ELSE IF i=pivot
              THEN calcop("T("+namep+"."+namep+")",getlist2(p))
              ELSE calcop("T("+namep+"."+pivotname+")",getlist3(p,q))
              FI
         FI
     FI;
     print(newline)
 
END;   { of PROC heckeop }
 
{------------------------------------------------------------------------}
PROC heckeopall = (INT i)VOID:
BEGIN
     PRIME pp = primes[i];
     IDEAL  p = ideal OF pp;   STRING namep = name OF pp;
 
     IF p DIV mod
     THEN print((namep, " divides mod",newline))
     ELSE
         IF PRINC p
         THEN calcop("T(" + namep + ")",getlist1(p))
         ELSE
              FOR j TO i
              DO IDEAL q = ideal OF primes[j];
                 IF NOT(PRINC(q)) AND NOT(q DIV mod)
                 THEN IF i=j THEN calcop("T("+namep+"."+namep+")",getlist2(p))
                             ELSE calcop("T("+namep+"."+name OF primes[j]+")",getlist3(p,q))
                      FI
                 FI
              OD
         FI
     FI;
     print(newline)
 
END;   { of PROC heckeopall }
 
SKIP
 
KEEP 
     getcoord,convertmatrix,qtovec,reconvert,*(LMATRIX,MODSYM),
     heckeop,heckeopall,hitlist,=([,]INT,[,]INT),
     calcop,getlist1,getlist2,getlist3,character
 
FINISH
