DECS gibasics USE intbasics,longcompstuff,longintbasics:
 
{******************************************************************
  Basic arithmetic for GI and QI over the nine fields 1, 2, 3, 7, 11,
  19, 43, 67, 163.   Uses Z-module algorithm for gcd.
  No mention of hyperbolic geometry.
 ------INT VERSION---------
************************************************************************}
 
INT field, whichfield;
[]INT fieldlist = (1,2,3,7,11,19,43,67,163);
[]INT nprimeslist = (93,94,95,98,98,96,116,185,50);
 
MODE GI = STRUCT(INT r,i);
 
GI zero=(0,0),one=(1,0),two=(2,0),w=(0,1);
GI three = (3,0), twelve = (12,0), minusone = (-1,0);
INT ngiprimes;REF[]GI giprimes;
 
[]GI z1primes = (GI(1,1),GI(1,2),GI(1,-2),GI(3,0),GI(3,2),GI(3,-2),
                 GI(1,4), GI(1,-4), GI(5,2), GI(5,-2), GI(1,6), GI(1,-6),
                 GI(5,4), GI(5,-4), GI(7, 0), GI(7,2), GI(7,-2), GI(6,5),
                 GI(6,-5), GI(8,3), GI(8,-3), GI(8,5), GI(8,-5), GI(9,4),
                 GI(9,-4), GI(10,1), GI(10,-1), GI(10,3), GI(10,-3), GI(8,7),
                 GI(8,-7), GI(11, 0), GI(11,4), GI(11,-4), GI(10,7), GI(10,-7),
                 GI(11,6), GI(11,-6), GI(13,2), GI(13,-2), GI(10,9), GI(10,-9),
                 GI(12,7), GI(12,-7), GI(14,1), GI(14,-1), GI(15,2), GI(15,-2),
                 GI(13,8), GI(13,-8), GI(15,4), GI(15,-4), GI(16,1), GI(16,-1),
                 GI(13,10), GI(13,-10), GI(14,9), GI(14,-9), GI(16,5), GI(16,-5),
                 GI(17,2), GI(17,-2), GI(13,12), GI(13,-12), GI(14,11), GI(14,-11),
                 GI(16,9), GI(16,-9), GI(18,5), GI(18,-5), GI(17,8), GI(17,-8),
                 GI(19, 0),
                 GI(18,7), GI(18,-7), GI(17,10), GI(17,-10), GI(19,6), GI(19,-6),
                 GI(20,1), GI(20,-1), GI(20,3), GI(20,-3), GI(15,14), GI(15,-14),
                 GI(17,12), GI(17,-12), GI(20,7), GI(20,-7), GI(21,4), GI(21,-4),
                 GI(19,10), GI(19,-10));
[]GI z2primes = (GI(0,1),GI(1,1),GI(1,-1),GI(3,1),GI(3,-1),GI(3,2),
                 GI(3,-2),GI(1,3),GI(1,-3),GI(5, 0),GI(3,4),GI(3,-4),
                 GI(5,3),GI(5,-3),GI(7, 0),GI(3,5),GI(3,-5),GI(7,3),
                 GI(7,-3),GI(1,6),GI(1,-6),GI(9,1),GI(9,-1),GI(9,2),
                 GI(9,-2),GI(5,6),GI(5,-6),GI(3,7),GI(3,-7),GI(9,4),
                 GI(9,-4),GI(9,5),GI(9,-5),GI(3,8),GI(3,-8),GI(11,3),
                 GI(11,-3),GI(1,9),GI(1,-9),GI(13, 0),GI(9,7),GI(9,-7),
                 GI(11,6),GI(11,-6),GI(7,9),GI(7,-9),GI(15,1),GI(15,-1),
                 GI(15,2),GI(15,-2),GI(13,6),GI(13,-6),GI(3,11),GI(3,-11),
                 GI(15,4),GI(15,-4),GI(9,10),GI(9,-10),GI(11,9),GI(11,-9),
                 GI(17,3),GI(17,-3),GI(5,12),GI(5,-12),GI(13,9),GI(13,-9),
                 GI(7,12),GI(7,-12),GI(3,13),GI(3,-13),GI(15,8),GI(15,-8),
                 GI(19,3),GI(19,-3),GI(3,14),GI(3,-14),GI(11,12),GI(11,-12),
                 GI(9,13),GI(9,-13),GI(19,6),GI(19,-6),GI(21,1),GI(21,-1),
                 GI(21,2),GI(21,-2),GI(13,12),GI(13,-12),GI(15,11),GI(15,-11),
                 GI(21,5),GI(21,-5),GI(7,15),GI(7,-15));
[]GI z3primes = (GI(1,1),GI(2, 0),GI(1,2),GI(2,1),GI(3,1),GI(1,3),
                 GI(3,2),GI(2,3),GI(5, 0),GI(5,1),GI(1,5),GI(3,4),
                 GI(4,3),GI(1,6),GI(6,1),GI(5,4),GI(4,5),GI(7,2),
                 GI(2,7),GI(1,8),GI(8,1),GI(7,3),GI(3,7),GI(3,8),
                 GI(8,3),GI(9,2),GI(2,9),GI(7,5),GI(5,7),GI(11, 0),
                 GI(7,6),GI(6,7),GI(3,10),GI(10,3),GI(9,5),GI(5,9),
                 GI(1,12),GI(12,1),GI(11,3),GI(3,11),GI(11,4),GI(4,11),
                 GI(9,7),GI(7,9),GI(13,2),GI(2,13),GI(1,14),GI(14,1),
                 GI(11,6),GI(6,11),GI(5,12),GI(12,5),GI(15,1),GI(1,15),
                 GI(9,10),GI(10,9),GI(7,12),GI(12,7),GI(13,6),GI(6,13),
                 GI(17, 0),GI(17,1),GI(1,17),GI(3,16),GI(16,3),GI(11,10),
                 GI(10,11),GI(13,8),GI(8,13),GI(17,3),GI(3,17),GI(13,9),
                 GI(9,13),GI(17,4),GI(4,17),GI(15,7),GI(7,15),GI(11,12),
                 GI(12,11),GI(15,8),GI(8,15),GI(1,20),GI(20,1),GI(13,11),
                 GI(11,13),GI(5,18),GI(18,5),GI(17,7),GI(7,17),GI(21,1),
                 GI(1,21),GI(21,2),GI(2,21),GI(7,18),GI(18,7));
[]GI z7primes = (GI(0,1),GI(1,-1),GI(1,-2),GI(3, 0),GI(1,2),GI(3,-2),
                 GI(3,2),GI(5,-2),GI(5, 0),(-1,4),GI(3,-4),GI(1,4),
                 GI(5,-4),GI(5,2),GI(7,-2),GI(3,4),GI(7,-4),(-1,6),
                 GI(5,-6),GI(7,2),GI(9,-2),GI(1,6),GI(7,-6),GI(9,2),
                 GI(11,-2),GI(7,4),GI(11,-4),(-3,8),GI(5,-8),GI(5,6),
                 GI(11,-6),GI(1,8),GI(9,-8),GI(9,4),GI(13,-4),GI(11,2),
                 GI(13,-2),GI(7,6),GI(13,-6),GI(13, 0),(-3,10),GI(7,-10),
                 (-1,10),GI(9,-10),GI(5,8),GI(13,-8),GI(11,4),GI(15,-4),
                 GI(1,10),GI(11,-10),GI(7,8),GI(15,-8),GI(3,10),GI(13,-10),
                 GI(15,2),GI(17,-2),(-1,12),GI(11,-12),GI(9,8),GI(17,-8),
                 GI(17, 0),GI(15,4),GI(19,-4),GI(17,2),GI(19,-2),GI(11,8),
                 GI(19,-8),(-5,14),GI(9,-14),(-3,14),GI(11,-14),GI(19, 0),
                 GI(5,12),GI(17,-12),(-1,14),GI(13,-14),GI(17,4),GI(21,-4),
                 GI(13,8),GI(21,-8),GI(7,12),GI(19,-12),GI(11,10),GI(21,-10),
                 GI(3,14),GI(17,-14),(-7,16),GI(9,-16),(-5,16),GI(11,-16),
                 GI(17,6),GI(23,-6),GI(5,14),GI(19,-14),GI(21,2),GI(23,-2),
                 GI(13,10),GI(23,-10));
[]GI z11primes = (GI(0,1),GI(1,-1),GI(2, 0),GI(1,1),GI(2,-1),(-1,2),
                 GI(4,1),GI(5,-1),GI(1,3),GI(4,-3),GI(2,3),GI(5,-3),
                 GI(5,2),GI(7,-2),GI(7, 0),GI(1,4),GI(5,-4),GI(7,1),
                 GI(8,-1),GI(5,3),GI(8,-3),(-1,5),GI(4,-5),GI(2,5),
                 GI(7,-5),GI(7,3),GI(10,-3),(-1,6),GI(5,-6),GI(10,1),
                 GI(11,-1),(-2,7),GI(5,-7),GI(10,3),GI(13,-3),GI(5,6),
                 GI(11,-6),GI(13, 0),GI(8,5),GI(13,-5),GI(11,3),GI(14,-3),
                 GI(4,7),GI(11,-7),GI(7,6),GI(13,-6),(-4,9),GI(5,-9),
                 (-2,9),GI(7,-9),GI(11,5),GI(16,-5),GI(5,8),GI(13,-8),
                 GI(13,4),GI(17,-4),GI(17, 0),GI(1,10),GI(11,-10),GI(5,9),
                 GI(14,-9),GI(10,7),GI(17,-7),GI(16,3),GI(19,-3),(-1,11),
                 GI(10,-11),GI(19, 0),GI(17,3),GI(20,-3),GI(8,9),GI(17,-9),
                 GI(19,1),GI(20,-1),GI(2,11),GI(13,-11),(-5,12),GI(7,-12),
                 GI(11,8),GI(19,-8),GI(7,10),GI(17,-10),(-1,12),GI(11,-12),
                 GI(10,9),GI(19,-9),GI(5,11),GI(16,-11),GI(17,5),GI(22,-5),
                 GI(11,9),GI(20,-9),(-5,13),GI(8,-13),GI(20,3),GI(23,-3),
                 GI(17,6),GI(23,-6));
 
 
[]GI z19primes =
((2, 0),(0, 1),(1, -1),(2, -1),
(1, 1),(3, 0),(3, -1),(2, 1),
(4, -1),(3, 1),(1, -2),(3, -2),
(1, 2),(2, -3),(1, -3),(7, -1),
(6, 1),(8, -1),(7, 1),(7, -3),
(4, 3),(9, -2),(7, 2),(7, -4),
(3, 4),(6, -5),(1, 5),(12, -1),
(11, 1),(7, -5),(2, 5),(8, -5),
(3, 5),(11, -4),(7, 4),(13, -2),
(11, 2),(13, 0),(11, -5),(6, 5),
(13, -4),(9, 4),(14, -3),(11, 3),
(13, -5),(8, 5),(4, -7),(3, -7),
(6, -7),(1, -7),(14, -5),(9, 5),
(9, -7),(2, 7),(13, -6),(7, 6),
(17, -1),(16, 1),(17, -3),(14, 3),
(18, -1),(17, 1),(7, -8),(1, -8),
(19, -1),(18, 1),(19, -3),(16, 3),
(11, -8),(3, 8),(18, -5),(13, 5),
(17, -6),(11, 6),(16, -7),(9, 7),
(8, -9),(1, -9),(21, -2),(19, 2),
(18, -7),(11, 7),(13, -9),(4, 9),
(21, -5),(16, 5),(22, -3),(19, 3),
(22, -1),(21, 1),(7, -10),(3, -10),
(9, -10),(1, -10),(22, -5),(17, 5));
 
 
[]GI z43primes =
((2, 0),(3, 0),(1, -1),(0, 1),
(2, -1),(1, 1),(3, -1),(2, 1),
(4, -1),(3, 1),(5, 0),(5, -1),
(4, 1),(6, -1),(5, 1),(1, -2),
(3, -2),(1, 2),(7, 0),(7, -1),
(6, 1),(5, -2),(3, 2),(8, -1),
(7, 1),(7, -2),(5, 2),(9, -1),
(8, 1),(2, -3),(1, -3),(10, -1),
(9, 1),(4, -3),(1, 3),(9, -2),
(7, 2),(5, -3),(2, 3),(7, -3),
(4, 3),(8, -3),(5, 3),(13, -1),
(12, 1),(3, -4),(1, -4),(5, -4),
(1, 4),(14, -1),(13, 1),(7, -4),
(3, 4),(13, -3),(10, 3),(15, -2),
(13, 2),(16, -1),(15, 1),(3, -5),
(2, -5),(4, -5),(1, -5),(6, -5),
(1, 5),(17, -1),(16, 1),(13, -4),
(9, 4),(16, -3),(13, 3),(9, -5),
(4, 5),(18, -1),(17, 1),(17, -3),
(14, 3),(19, -1),(18, 1),(12, -5),
(7, 5),(19, 0),(19, -2),(17, 2),
(13, -5),(8, 5),(17, -4),(13, 4),
(14, -5),(9, 5),(21, -1),(20, 1),
(20, -3),(17, 3),(21, -2),(19, 2),
(19, -4),(15, 4),(17, -5),(12, 5),
(13, -6),(7, 6),(18, -5),(13, 5),
(19, -5),(14, 5),(8, -7),(1, 7),
(9, -7),(2, 7),(24, -1),(23, 1),
(10, -7),(3, 7),(12, -7),(5, 7));
 
[]GI z67primes =
((2, 0), (3, 0), (1, -1), (0, 1),
(2, -1), (1, 1), (3, -1), (2, 1),
(5, 0), (4, -1), (3, 1), (5, -1),
(4, 1), (6, -1), (5, 1), (7, 0),
(7, -1), (6, 1), (1, -2), (3, -2),
(1, 2), (8, -1), (7, 1), (5, -2),
(3, 2), (9, -1), (8, 1), (7, -2),
(5, 2), (10, -1), (9, 1), (11, 0),
(11, -1), (10, 1), (9, -2), (7, 2),
(12, -1), (11, 1), (2, -3), (1, -3),
(4, -3), (1, 3), (5, -3), (2, 3),
(11, -2), (9, 2), (13, 0), (13, -1),
(12, 1), (7, -3), (4, 3), (8, -3),
(5, 3), (14, -1), (13, 1), (13, -2),
 
(11, 2), (10, -3), (7, 3), (15, -1),
(14, 1), (11, -3), (8, 3), (16, -1),
(15, 1), (15, -2), (13, 2), (3, -4),
(1, -4), (5, -4), (1, 4), (13, -3),
(10, 3), (7, -4), (3, 4), (14, -3),
(11, 3), (9, -4), (5, 4), (11, -4),
(7, 4), (19, -1), (18, 1), (13, -4),
(9, 4), (20, -1), (19, 1), (3, -5),
(2, -5), (4, -5), (1, -5), (6, -5),
(1, 5), (7, -5), (2, 5), (8, -5),
(3, 5), (19, -3), (16, 3), (9, -5),
(4, 5), (21, -2), (19, 2), (22, -1),
(21, 1), (11, -5), (6, 5),
(12, -5), (7, 5), (23, -1),
(22, 1), (19, -4), (15, 4), (24, -1),
(23, 1), (22, -3), (19, 3), (16, -5),
(11, 5), (5, -6), (1, -6), (23, -3),
(20, 3), (25, -1), (24, 1), (7, -6),
(1, 6), (25, -2), (23, 2), (18, -5),
(13, 5), (19, -5), (14, 5), (23, -4),
(19, 4), (27, -1), (26, 1), (27, -2),
(25, 2), (26, -3), (23, 3), (21, -5),
(16, 5), (28, -1), (27, 1), (25, -4),
(21, 4),
(4, -7), (3, -7), (5, -7),
(2, -7), (6, -7), (1, -7), (29, -1),
(28, 1), (23, -5), (18, 5), (28, -3),
(25, 3), (19, -6), (13, 6), (10, -7),
(3, 7), (11, -7), (4, 7), (24, -5),
(19, 5), (30, -1), (29, 1), (29, -3),
(26, 3), (13, -7), (6, 7), (31, -1),
(30, 1), (15, -7), (8, 7), (31, -2),
(29, 2), (26, -5), (21, 5), (16, -7),
(9, 7), (29, -4), (25, 4));
 
 
[]GI z163primes = ((2, 0),(3, 0),(5, 0),(1, -1),
                    (0, 1),(2, -1),(1, 1),(3, -1),(2, 1),
                         (7, 0),(4, -1),(3, 1),(5, -1),
                    (4, 1),(6, -1),(5, 1),(7, -1),
                         (6, 1),(8, -1),(7, 1),(9, -1),
                    (8, 1),(11, 0),(10, -1),(9, 1),
                         (11, -1),(10, 1),(1, -2),(3, -2),
                    (2, 1),(13, 0),(12, -1),
                         (11, 1),(5, -2),(3, 2),(13, -1),
                    (12, 1),(7, -2),(5, 2),
                         (14, -1),(13, 1),(9, -2),(7, 2),
                    (15, -1),(14, 1),(11, -2),
                         (9, 2),(16, -1),(15, 1),(17, 0));
 
OP R = (GI x)INT: (r OF x);
OP I = (GI x)INT: (i OF x);
OP G = (INT n)GI: (n,0);
OP W = (INT a,b)GI: (a,b);
OP - = (GI x)GI: (-Rx,-Ix);
INT normw, tracew;
 
OP * = (GI x,y)GI:
BEGIN INT ix=Ix,rx=Rx,iy=Iy,ry=Ry;
      GI(rx*ry - normw*ix*iy, ix*ry + (rx + tracew*ix)*iy)
END;
OP - = (GI a,b)GI:(Ra - Rb, Ia - Ib);
OP + = (GI a,b)GI:(Ra + Rb, Ia + Ib);
INT nunits;
GI fundunit;
 
PROC conj1 = (GI x)GI: (Rx,-Ix);
PROC conj2 = (GI x)GI: (Rx+Ix,-Ix);
PROC(GI)GI conj;
PROC norm = (GI a)INT: R(a*conj(a));
 
PROC (GI,INT)GI  gidivint;   {Rounded division of GI by INT}
OP % = (GI a, INT n)GI: gidivint(a,n);    {rounded division}
 
PROC gidivint2 = (GI a, INT n)GI:
BEGIN GI ans;
      INT ra=r OF a, ia=i OF a;
      r OF ans := (ra+ra + ia - n*(i OF ans := ia OVER n)) OVER (n+n);
     ans
END;
 
PROC gidivint1 = (GI a, INT n)GI:
BEGIN
   GI ((r OF a) OVER n, (i OF a) OVER n)
END;
 
 
OP % = (GI xb,xc)GI: (xb*conj(xc)) % norm(xc) ;
 
OP / = (GI a, INT n)GI : ((r OF a)%n, (i OF a)%n); {Not rounded - use only for exact division}
 
OP / = (GI a,b)GI : (a*conj(b))/(norm(b));
 
OP = = (GI a,b)BOOL:(Ra = Rb) AND (Ia = Ib);
OP MODULO = (GI fa,mod)GI: (fa - mod*(fa%mod));
 
PROC compare = (GI g, REF []GI table, INT ntable)INT:
(INT ans := 0;
FOR i TO ntable WHILE (ans=0) DO IF g=table[i] THEN ans:=i FI OD; ans);
 
PROC infirstquad1 = (GI x)BOOL: ((Rx>0) OR ((Rx=0) AND (Ix>=0)));
PROC infirstquad2 = (GI x)BOOL:((Ix>=0 AND Rx>0) OR x=zero);
PROC(GI)BOOL infirstquad;
PROC firstq = (GI a)GI:
BEGIN GI ans := a;
      WHILE NOT infirstquad(ans) DO ans :=fundunit*ans OD;
      ans
END;
 
 
PROC fix = (REF LONG COMPL z)VOID:
BEGIN REF LONG REAL x = re OF z, y = im OF z;
      IF field > 2 THEN y/:=(LONG 2); x+:=y FI;
      IF field > 1 THEN y*:=longsqrt(LENG field) FI
END;
 
PROC unfix = (REF LONG COMPL z)VOID:
BEGIN REF LONG REAL x = re OF z, y = im OF z;
      IF field > 1 THEN y/:=longsqrt(LENG field) FI;
      IF field > 2 THEN x-:=y; y*:=(LONG 2) FI
END;
 
PROC round = (LONG COMPL z)REF GI:
BEGIN
    LONG COMPL zz := z;
    unfix(zz);
    HEAP GI ans;
   r OF ans := ROUND SHORTEN (re OF zz);
   i OF ans := ROUND SHORTEN (im OF zz);
    ans
END;
 
PROC complexify = (GI a)REF LONG COMPL:
BEGIN
   HEAP LONG COMPL ans;
   re OF ans := LENG r OF a;
   im OF ans := LENG i OF a;
   fix(ans);
   ans
END;
 
OP DIV = (GI b,a)BOOL:
BEGIN
      IF b=zero THEN (a=zero) ELSE
      INT n = norm(b);  GI c = a*conj(b);
      ((r OF c)%*n = 0) AND ((i OF c)%*n = 0)
      FI
END;
OP NDIV = (GI a,b)BOOL: (NOT (a DIV b));
 
PROC val = (GI factor,number)INT:
BEGIN INT ans:=0; GI hold:=number; GI hold2;
     IF NOT (hold=zero) THEN
    WHILE hold2:=hold%factor;hold=hold2*factor DO hold:=hold2; ans+:=1 OD
     ELSE ans := -1
     FI;
     ans
END;
 
PROC giprimefactors = (GI a)REF[]GI:
BEGIN
GI b:=a;INT n:=0;HEAP[20]GI answer;INT nb,np;GI p;
FOR i TO UPB giprimes WHILE (nb:=norm(b))>1 AND ((np:=(norm(p:=giprimes[i])));np*np<=nb+1)
DO
   INT v = val(p,b);
   IF v>0 THEN answer[n+:=1] := p;
               TO v DO b := b%p OD
   FI
OD;
IF norm(b)>1 THEN answer[n+:=1] := b FI;
{
print(("PROC giprimefactors called with ",a));
print(("returns:",newline));
FOR i TO n DO print(answer[i]);print(newline) OD;
}
answer[1:n]
END;
 
 
PROC readgi = (REF GI a)VOID:read((r OF a,i OF a));
STRING name;
 
PROC printgi = (GI a)VOID:
BEGIN
INT  i = i OF a, r=r OF a;
IF (i =0) THEN print(r)
ELIF (r =0) THEN
   IF i = 1 THEN print((space,name))
   ELIF i = -1 THEN print((space,"-",name))
   ELSE print((i,name))
   FI
ELSE print((r, (i >0| " +" | " -" )));
IF ABS(i) = 1 THEN print((space,name)) ELSE print((ABS(i),name)) FI
FI;
print(("  "))
END;
 
PROC printgifac = (GI a)VOID:
BEGIN
GI b:=a;
IF norm(b)<=1 THEN printgi(b)
ELSE
FOR i TO UPB giprimes WHILE norm(b)>1 DO
   GI p = giprimes[i];
   INT v = val(p,b);
   IF v>0 THEN print("(");printgi(p);print(")");
               IF v>1 THEN print(("(^",v,")")) FI;
               TO v DO b := b % p OD
   FI;
   SKIP
OD;
IF NOT(b=one) THEN print("(");printgi(b);print(")") FI
FI
END;
 
PROC giresidues = (GI a)REF[]GI:
{Gives a standard list of residues modulo a}
BEGIN
INT norma = norm(a);
INT l := 0;
HEAP[norma]GI list;
INT r = r OF a,i = i OF a,m = gcd(r,i),rednorm = norma%(m*m);
FOR j TO rednorm*m DO FOR k TO m DO
   list[l+:=1] := GI( j, k) MODULO a
OD OD;
list
END;
 
OP * = (INT m,GI a)GI: (m*Ra,m*Ia);
 
{End of easy stuff, not involving gcd}
 
{
PROC vecbezout = ([]INT a,REF INT g)REF[]INT:
     {g = c.a = gcd(ai)}
BEGIN
      INT n = UPB a;
      HEAP[n]INT c;
      g := 0;
      FOR i TO n DO
         []INT bez = bezout(g,a[i]);
         g := bez[1];
         FOR j TO i-1 DO c[j] := bez[2] * c[j] OD;
         c[i] := bez[3]
      OD;
      c
END;
 
PROC findzbasis = ([]INT first,second)REF[,]INT:
BEGIN
      [4]INT x,y,basis; INT e1,e2; e1 := 0;
      HEAP[3,4]INT ans;
      x := vecbezout(second,e2);
      FOR i TO 4 DO e1 +:= x[i] * first[i] OD;
      {now (e1,e2) is the x-combination of the data, with e2
       the gcd of the second coefficients}
      [4]INT newfirst;
      [4][4]INT z;
      FOR i TO 4 DO
         INT n = second[i] % e2;
         newfirst[i] := first[i] - n * e1;
         {second[i] - n * e2 = 0}
         FOR j TO 4 DO z[i][j] := -n * x[j] OD;
         z[i][i] +:= 1
         {now z[i]-comb of data is (newfirst[i],0)}
      OD;
      INT f1,f2;
      f2 := 0;
      [4]INT u;
      u := vecbezout(newfirst,f1);
      basis[1] := e1;
      basis[2] := e2;
      basis[3] := f1;
      basis[4] := f2;
      ans[1,] := basis;
      ans[2,] := x;
      FOR j TO 4 DO
         y[j] := 0;
         FOR i TO 4 DO y[j] +:= u[i] * z[i][j] OD
      OD;
      ans[3,] := y;
{CHECK:}
      ans
END;
 
PROC findminvec = ([]INT basis)REF[]INT:
BEGIN
      INT e1,e2,f1,f2,n,norm1,norm2,temp1,temp2;
      HEAP[2]INT c,d,temp;
      c[1]:=1; c[2]:=0; d[1]:=0; d[2]:=1;
      e1 := basis[1]; e2 := basis[2]; f1 := basis[3]; f2 := basis[4];
      WHILE
            IF ((f1 = 0) AND (f2 = 0)) THEN n := 0 ELSE
            n := (((2)*e1 + e2)*f1 + (e1 + (2)*normw*e2)*f2) OVER
                          ((2)*(f1*(f1+f2) + normw*f2*f2)) FI;
            e1 -:=  n*f1; e2 -:=  n*f2;
            FOR i TO 2 DO d[i] -:=  n*c[i] ; SKIP {print(("d[",i,"] = ",d[i],newline))} OD;
            norm1 := e1*(e1 + e2) + normw*e2*e2;
            norm2 := f1*(f1 + f2) + normw*f2*f2;
      (norm2 > norm1)
   DO
            temp1 := e1; temp2 := e2;
            e1 := -f1; e2 := -f2;
            f1 := temp1; f2 := temp2;
            temp := d;
            FOR i TO 2 DO d[i] := -c[i] ; SKIP {print(("d[",i,"] = ",d[i],newline))} OD;
            c := temp; SKIP {FOR i TO 2 DO print(("c[",i,"] = ",c[i],newline)) OD}
      OD;
      c
END;
}
PROC vecbezout = ([]LONG INT a,REF LONG INT g)REF[]LONG INT:
     {g = c.a = gcd(ai)}
BEGIN
      INT n = UPB a;
      HEAP[n]LONG INT c;
      g := LONG 0;
      FOR i TO n DO
         []LONG INT bez = longbezout(g,a[i]);
         g := bez[1];
         FOR j TO i-1 DO c[j] := bez[2] * c[j] OD;
         c[i] := bez[3]
      OD;
      c
END;
 
PROC findzbasis = ([]LONG INT first,second)REF[,]LONG INT:
BEGIN
      [4]LONG INT x,y,basis; LONG INT e1,e2; e1 := LONG 0;
      HEAP[3,4]LONG INT ans;
      x := vecbezout(second,e2);
      FOR i TO 4 DO e1 +:= x[i] * first[i] OD;
      {now (e1,e2) is the x-combination of the data, with e2
       the gcd of the second coefficients}
      [4]LONG INT newfirst;
      [4][4]LONG INT z;
      FOR i TO 4 DO
         LONG INT n = second[i] % e2;
         newfirst[i] := first[i] - n * e1;
         {second[i] - n * e2 = 0}
         FOR j TO 4 DO z[i][j] := -n * x[j] OD;
         z[i][i] +:= LONG 1
         {now z[i]-comb of data is (newfirst[i],0)}
      OD;
      LONG INT f1,f2;
      f2 := LONG 0;
      [4]LONG INT u;
      u := vecbezout(newfirst,f1);
      basis[1] := e1;
      basis[2] := e2;
      basis[3] := f1;
      basis[4] := f2;
      ans[1,] := basis;
      ans[2,] := x;
      FOR j TO 4 DO
         y[j] := LONG 0;
         FOR i TO 4 DO y[j] +:= u[i] * z[i][j] OD
      OD;
      ans[3,] := y;
{CHECK:}
      ans
END;
 
PROC findminvec = ([]LONG INT basis)REF[]LONG INT:
BEGIN
      LONG INT e1,e2,f1,f2,n,norm1,norm2,temp1,temp2;
      HEAP[2]LONG INT c,d,temp;
      c[1]:=LONG 1; c[2]:=LONG 0; d[1]:=LONG 0; d[2]:=LONG 1;
      e1 := basis[1]; e2 := basis[2]; f1 := basis[3]; f2 := basis[4];
      WHILE
            IF ((f1 = LONG 0) AND (f2 = LONG 0)) THEN n := LONG 0 ELSE
            n := (((LONG 2)*e1 + e2)*f1 + (e1 + (LONG 2)*(LENG normw)*e2)*f2) OVER
                          ((LONG 2)*(f1*(f1+f2) + (LENG normw)*f2*f2)) FI;
            e1 -:=  n*f1; e2 -:=  n*f2;
            FOR i TO 2 DO d[i] -:=  n*c[i] ; SKIP {print(("d[",i,"] = ",d[i],newline))} OD;
            norm1 := e1*(e1 + e2) + (LENG normw)*e2*e2;
            norm2 := f1*(f1 + f2) + (LENG normw)*f2*f2;
      (norm2 > norm1)
   DO
            temp1 := e1; temp2 := e2;
            e1 := -f1; e2 := -f2;
            f1 := temp1; f2 := temp2;
            temp := d;
            FOR i TO 2 DO d[i] := -c[i] ; SKIP {print(("d[",i,"] = ",d[i],newline))} OD;
            c := temp; SKIP {FOR i TO 2 DO print(("c[",i,"] = ",c[i],newline)) OD}
      OD;
      c
END;
 
 
PROC(GI,GI)REF[]GI gibezout;
 
PROC gibezout1 = (GI pb,pc)REF[]GI:
BEGIN
   GI coefa1:=one, coefb2:=one, coefa2:=zero, coefb1:=zero;
   HEAP [1:3] GI result;
   GI rem1 :=pb, rem2:=pc;
   WHILE NOT (rem2 = zero) DO
   GI quot = rem1%rem2;
   GI temp:=rem2; rem2:=rem1 - rem2*quot; rem1:=temp;
   temp:=coefa2; coefa2:=coefa1 - coefa2*quot; coefa1:=temp;
   temp:=coefb2; coefb2:=coefb1 - coefb2*quot; coefb1:=temp
   OD;
   WHILE NOT infirstquad(rem1)
   DO rem1:=fundunit*rem1; coefa1:=fundunit*coefa1; coefb1:=fundunit*coefb1
   OD;
   result := (rem1, coefa1, coefb1)
END;
 
PROC gibezout2 = (GI xalpha,xbeta)REF[]GI:
BEGIN
      GI alpha := xalpha, beta:=xbeta;
      GI coeff1,coeff2,g;  HEAP[3]GI ans;
      IF beta DIV alpha THEN g:=beta; coeff1:=zero; coeff2:=one
      ELIF alpha DIV beta THEN g:=alpha; coeff1:=one; coeff2:=zero
      ELSE
      GI quot1 = alpha%beta; alpha:=alpha-quot1*beta;
      GI quot2 = beta%alpha; beta:=beta-quot2*alpha;
      LONG INT n = LENG normw, t=LENG tracew;
      [4]LONG INT z;
      INT a1 = Ralpha, a2 = Ialpha,   b1 = R(beta), b2 = I(beta);
      INT c1 = -normw*a2, c2 = a1 + tracew*a2,   d1 = -normw*b2, d2 = b1 + tracew*b2;
      []LONG INT first = (LENG a1,LENG b1,LENG c1,LENG d1); 
      []LONG INT second = (LENG a2,LENG b2,LENG c2,LENG d2);
      [,]LONG INT zbasis = findzbasis(first,second);
      []LONG INT x = zbasis[2,]; []LONG INT y = zbasis[3,];
      []LONG INT coeff = findminvec(zbasis[1,]);
      FOR i TO 4 DO z[i] := coeff[1]*y[i] + coeff[2]*x[i] OD;
      coeff1 := GI(SHORTEN z[1],SHORTEN z[3]);    
      coeff2 := GI(SHORTEN z[2],SHORTEN z[4]);
      g := coeff1 * alpha + coeff2 * beta;
      coeff1:=coeff1-coeff2*quot2;
      coeff2:=coeff2-coeff1*quot1
      FI;
      WHILE NOT infirstquad(g)
      DO g:=fundunit*g; coeff1:=fundunit*coeff1; coeff2:=fundunit*coeff2
      OD;
      ans := (g,coeff1,coeff2);
{CHECK:}
   IF ((g DIV xalpha) AND (g DIV xbeta)) THEN SKIP
   ELSE print(("Error in PROC gibezout!",newline));
        print(("alpha = "));printgi(xalpha);print(newline);
        print(("beta  = "));printgi(xbeta); print(newline);
        print(("g   = "));printgi(g);  print(newline)
   FI;
      ans
END;
 
 
PROC gigcd = (GI a,b)GI: gibezout(a,b)[1];
 
PROC coprime = (GI a,b)BOOL: gigcd(a,b)=one;
 
OP UNIT = (GI a)BOOL: (norm(a)=1);
 
OP INVMOD = (GI a,b)GI:
BEGIN []GI gxy = gibezout(a,b);
      IF NOT (gxy[1]=one)
     THEN printgi(a);print(" is not invertible modulo ");printgi(b);
           print(newline)
      FI;
      gxy[2] MODULO b
END;
 
PROC invertible = (GI a,b, REF GI inverse)BOOL:
BEGIN []GI gxy = gibezout(a,b);
      inverse:=gxy[2];
      (one = gxy[1])
END;
 
MODE QI = STRUCT(GI n,d);
OP N = (QI q)GI: n OF q;
OP D = (QI q)GI: d OF q;
OP - = (QI q)QI: (-Nq,Dq);
 
OP = = (QI p,q)BOOL:(Np * Dq = Dp * Nq);
QI qzero=(zero,one),qone=(one,one),qw=(w,one),infinity=(one,zero);
PROC readqi = (REF QI a)VOID:(readgi(n OF a);readgi(d OF a));
PROC printqi = (QI a)VOID:
BEGIN
GI n = Na, d = Da;
IF d=one THEN printgi(n)
ELSE print("(");printgi(n);print(")/(");printgi(d);print(")")
FI
END;
 
PROC setuparithmetic = VOID:
BEGIN
      whichfield:=0;
      FOR i TO 9 WHILE whichfield=0
      DO IF field=fieldlist[i] THEN whichfield:=i FI
      OD;
     IF whichfield=0 THEN print(("Error: setuparithmetic called with invalid field ",field,newline)); stop FI;
      normw := ((whichfield|1,2,1,2,3,5,11,17,41));
     tracew := ((whichfield|0,0,1,1,1,1,1,1,1));
      ngiprimes := nprimeslist[whichfield];
      giprimes := HEAP[ngiprimes]GI := (whichfield|z1primes,z2primes,z3primes,z7primes,z11primes,z19primes,z43primes,z67primes,z163primes);
   nunits := (whichfield|4,2,6,2,2,2,2,2,2);
   fundunit := (whichfield|w,minusone,w,minusone,minusone,minusone,minusone,minusone,minusone);
   conj   := (whichfield<3|conj1|conj2);
   infirstquad := (whichfield=1 OR whichfield=3 | infirstquad2 | infirstquad1);
   gidivint := (whichfield<3 | gidivint1 | gidivint2);
   name := (whichfield|"i","t","w","a","a","a","a","a","a");
   gibezout := (whichfield<6|gibezout1|gibezout2);
   SKIP
END;
 
 
PROC qicancel = (QI q)QI:
BEGIN GI nq=Nq,dq=Dq;
GI h=gigcd(nq,dq); HEAP QI ans;
      IF (h=zero) THEN print("qicancel tried with 0/0");SKIP
                  ELSE ans:=(Nq/h,Dq/h);
                        WHILE NOT infirstquad(Dans)
                        DO ans:=(fundunit*Nans,fundunit*Dans)
                        OD;
                        ans
      FI
END;
 
 
OP + = (QI p,q)QI:qicancel(((Np * Dq)+(Dp * Nq),Dp * Dq));
OP - = (QI p)QI:(-Np,Dp);
OP - = (QI p,q)QI:qicancel(((Np * Dq)-(Dp * Nq),Dp * Dq));
OP * = (QI p,q)QI:qicancel((Np * Nq,Dp * Dq));
OP * = (GI a, QI q)QI:qicancel((a*Nq, Dq));
OP % = (QI p)QI:(Dp,Np);
OP % = (QI p,q)QI:qicancel((Np * Dq,Dp * Nq));
OP OVER = (GI a,b)QI: qicancel(QI(a,b));
 
OP * = (INT m, QI q)QI: (m*Nq) OVER (Dq);
 
 
 
PROC printqifac = (QI a)VOID:
BEGIN
QI b = qicancel(a);
GI n := Nb, d := Db;
FOR i TO UPB giprimes WHILE norm(n*d)>1 DO
    GI p = giprimes[i];
    INT v = val(p,n) - val(p,d);
    IF v/=0 THEN
       print("(");printgi(p);print((")(^",v,")"));
       IF v>0 THEN TO v DO n:=n%p OD ELSE TO -v DO d:=d%p OD FI
    FI
OD;
IF norm(d) = 1 THEN n:=n%d; d:=one FI;
IF NOT (n=one) THEN print("(");printgi(n);print(")") FI;
IF NOT (d=one) THEN print(" / (");printgi(d);print(")") FI
END;
 
PROC reducemodzi = (QI q)QI:
(GI d=Dq; HEAP QI := (d=zero|QI(one,zero)|QI(Nq MODULO d,d)));
 
PROC getprimedivisor = (GI a, REF INT n)GI:
BEGIN
      BOOL notfound := TRUE; GI p := one;
      IF norm(a) <= 1
      THEN print(("PROC getprimedivisor called with a = "));
           printgi(a); print(newline)
      ELSE
      FOR i FROM n TO ngiprimes WHILE norm(p*p) <= norm(a) AND notfound
      DO p := giprimes[i]; n := i;
         notfound := p NDIV a
      OD;
      n+:=1;
      IF notfound THEN IF norm(p*p) <= norm(a)
                       THEN print("No prime divisor found for");printgi(a);
                            print((" so assuming it is prime",newline))
                       FI;
                       p:=a
      FI
      FI;
      p
END;
 
 
 
PROC show = (REF[]GI x,INT n)VOID:
(print(newline);FOR i TO n DO printgi(x[i]);print(newline) OD);
 
PROC findgi = (GI a, REF []GI list)INT:
BEGIN
   INT ans := 0;
   FOR i TO UPB list WHILE ans=0   DO IF a=list[i] THEN ans := i FI   OD;
   ans
END;
 
PROC primepowerdivisor = (GI n, REF GI p,q,n1,REF INT start)VOID:
BEGIN p:=getprimedivisor(n,start);
      q:=one;n1:=n;
      WHILE p DIV n1 DO q:=q*p; n1:=n1%p OD
END;
 
PROC maxsquarediv = (GI d)GI:
BEGIN
   GI dd := d, ans := one;
   FOR i TO UPB giprimes WHILE norm(dd) > 1
   DO GI p = giprimes[i];
      FOR j WHILE p DIV dd
      DO dd:=dd%p;
         IF NOT ODD(j) THEN ans:=ans*p FI
      OD
   OD;
   IF norm(dd)>1
   THEN print(("Warning from PROC maxsquarediv: unable to find a prime which divides "));
        printgi(dd);print((" so assuming it is prime", newline))
   FI;
   ans
END;
 
PROC forallposdiv = (GI n, PROC(GI)VOID f,INT start,REF BOOL go on)VOID:
BEGIN  INT start2:=start;
      IF norm(n)<=1
      THEN GI u := one;
           FOR i TO (whichfield|2,1,3,1,1,1,1,1,1) DO f(u);u:=u*fundunit OD
      ELSE GI n1,p,q; primepowerdivisor(n,p,q,n1,start2);
           PROC try d = (GI d)VOID:
           BEGIN GI q1:=one;
                 WHILE (norm(q1)<=norm(q)) AND go on
                 DO f(q1*d); q1:=q1*p OD
           END;
 
           forallposdiv(n1,try d,start2,go on)
      FI
END;
 
PROC foralldiv = (GI n, PROC(GI)VOID f,INT start,REF BOOL go on)VOID:
BEGIN INT start2 := start;
      IF norm(n)=1
      THEN GI u:=one;
           FOR i TO (whichfield|4,2,6,2,2,2,2,2,2) DO f(u);u:=u*fundunit OD
      ELSE GI n1,p,q; primepowerdivisor(n,p,q,n1,start2);
           PROC try d = (GI d)VOID:
           BEGIN GI q1 := one;
                 WHILE (norm(q1)<=norm(q)) AND go on
                 DO f(q1*d); q1:=q1*p OD
           END;
 
           foralldiv(n1,try d,start2,go on)
      FI
END;
 
PROC gicubicroots = (GI a,b,c)REF[]GI:
BEGIN []LONG COMPL croots =  solvecubic(complexify(a),complexify(b),complexify(c));
      INT ncroots = UPB croots;
      HEAP[ncroots]GI giroots;
      INT ngiroots :=0;
      FOR i TO ncroots DO
       GI x = round(croots[i]);
         IF
            IF x=zero THEN c=zero
            ELSE
            GI cx = c%x;
            IF x*cx=c
            THEN (x+a)*x+b+cx = zero
            ELSE FALSE
            FI
            FI
         THEN giroots[ngiroots+:=1]:=x
         FI
      OD;
   giroots[1:ngiroots]
END;
 
PROC giquarticroots = (GI a,b,c,d)REF[]GI:
BEGIN []LONG COMPL croots =  solvequartic(complexify(a),complexify(b),complexify(c),complexify(d));
      INT ncroots = UPB croots;
      HEAP[ncroots]GI quartroots;
      INT nquartroots :=0;
      FOR i TO ncroots DO
       GI x = round(croots[i]);
         IF
            IF x=zero THEN d=zero
            ELSE
            GI dx = d%x;
            IF x*dx=d
            THEN x*(x*(x+a)+b)+c+dx = zero
            ELSE FALSE
            FI
            FI
         THEN quartroots[nquartroots+:=1]:=x
         FI
      OD;
   quartroots[1:nquartroots]
END;
 
 
PROC giquadroots = (GI b,c)REF[]GI:
BEGIN GI d = b*b-4*c; HEAP[1:2]GI roots; INT nroots:=0;
      IF d=zero THEN roots[nroots:=1]:= -b%two
      ELIF c=zero THEN nroots:=2; roots[1]:=zero; roots[2]:=-b
      ELSE
          LONG COMPL zb = complexify(b), zc=complexify(c), zd=complexify(d);
          LONG COMPL root1 = (csqrt(zd)-zb)/LONG 2.0;
          GI r1 = round(root1);
          IF r1*(r1+b)+c=zero
          THEN nroots := 2;
               roots[1] := r1;
               roots[2] := -b-r1
          FI
      FI;
      roots[1:nroots]
END;
 
 
SKIP
 
KEEP GI,QI,gibezout,gigcd, fix,unfix,
     round,complexify,printqifac,reducemodzi,getprimedivisor,
     giresidues,*(INT,GI),*(INT,QI),
     printgi,readgi,printgifac,field,whichfield,
     norm,MODULO(GI,GI),compare,DIV(GI,GI),NDIV(GI,GI),val,conj,
     findgi,R(GI),I(GI),N(QI),D(QI),
     giprimefactors,zero,one,two,w,giprimes,twelve,three,infinity,minusone,
     -(GI),-(GI,GI),+(GI,GI),*(GI,GI),%(GI,GI),=(GI,GI),
     /(GI,INT), /(GI,GI),G(INT), W(INT,INT),
     ngiprimes,infirstquad,invertible,firstq,
     name,setuparithmetic,
     qicancel,+(QI,QI),-(QI),-(QI,QI),*(QI,QI),%(QI),%(QI,QI),=(QI,QI),
     qzero,qone,qw,printqi,readqi,
     show,*(GI,QI),
     coprime, nunits, fundunit,
     %(GI,INT),OVER(GI,GI),
     UNIT(GI),INVMOD(GI,GI),
     normw,tracew,
     primepowerdivisor,maxsquarediv,forallposdiv,foralldiv,
     gicubicroots,giquarticroots,giquadroots
 
FINISH
