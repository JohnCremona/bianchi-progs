# Precomputed alphas for some fields

def precomputed_alphas(k_or_d):

    from sage.all import ZZ, QQ, polygen, NumberField, NFCusp
    from utils import smallest_ideal_class_representatives

    if k_or_d in ZZ:
        # then d=k>0 should be square-free
        x = polygen(QQ)
        d = k_or_d
        if d%4==3:
            k = NumberField(x**2-x+(1+d)//4, 'w')
        else:
            k = NumberField(x**2+d, 'w')
    else:
        k = k_or_d
        d = -k.discriminant().squarefree_part()

    w = k.gen()
    IC = smallest_ideal_class_representatives(k)
    cusp = lambda a: NFCusp(k, k(a), lreps=IC)

    if d in [1, 2, 3, 7, 11]:
        return [cusp(0)]

    if d == 19:
        return [cusp(a) for a in [0, w/2,(w-1)/2]]

    if d == 43:
        return [cusp(a) for a in [0, w/2, (-1+w)/2, w/3, -w/3,
                                  (1-w)/3, (-1+w)/3, (1+w)/3, (-1-w)/3]]

    if d == 5:
        return [cusp(a) for a in [0, w/2, (w-4)/(2*w), (4-w)/(2*w)]]

    if d == 6:
        return [cusp(a) for a in [0, (w+1)/2, 5/(2*w), -5/(2*w)]]

    if d == 10:
        return [cusp(a) for a in [0, (w+1)/2, w/3, -w/3, (1+w)/3, (-1-w)/3, (1-w)/3,
                                  (-1+w)/3, 9/(2*w), -9/(2*w)]]

    if d == 13:
        return [cusp(a) for a in [(0)/(1), (w)/(2), (w)/(3), (-w)/(3), (w + 1)/(3), (-w - 1)/(3), (-w + 1)/(3), (w - 1)/(3), (w - 12)/(2*w), (-w + 12)/(2*w), (w + 2)/(4), (-w - 2)/(4), (2*w + 2)/(5), (-2*w - 2)/(5), (2*w - 2)/(5), (-2*w + 2)/(5)]]

    if d == 14:
        return [cusp(a) for a in [(0)/(1), (w + 1)/(2), (w)/(3), (-w)/(3), (4)/(w - 1), (-4)/(w - 1), (4)/(w + 1), (-4)/(w + 1), (w + 7)/(w - 4), (-w - 7)/(w - 4), (w - 7)/(w + 4), (-w + 7)/(w + 4), (2*w + 3)/(6), (-2*w - 3)/(6), (13)/(2*w), (-13)/(2*w), (2*w)/(5), (-2*w)/(5), (w + 5)/(w - 2), (-w - 5)/(w - 2), (w + 3)/(w - 2), (-w - 3)/(w - 2), (w - 3)/(w + 2), (-w + 3)/(w + 2), (w - 5)/(w + 2), (-w + 5)/(w + 2)]]

    if d == 15:
        return [cusp(a) for a in [(0)/(1), (w - 4)/(2*w - 1), (-w + 4)/(2*w - 1)]]

    if d == 17:
        return [cusp(a) for a in [(0)/(1), (w)/(2), (w)/(3), (-w)/(3), (w + 6)/(w - 2), (-w - 6)/(w - 2), (w - 6)/(w + 2), (-w + 6)/(w + 2), (2*w + 3)/(6), (-2*w - 3)/(6), (2*w + 3)/(w - 5), (-2*w - 3)/(w - 5), (2*w - 3)/(w + 5), (-2*w + 3)/(w + 5), (w - 16)/(2*w), (-w + 16)/(2*w), (w)/(4), (-w)/(4), (w + 2)/(4), (-w - 2)/(4), (7)/(w - 1), (-7)/(w - 1), (5)/(w - 1), (-5)/(w - 1), (7)/(w + 1), (-7)/(w + 1), (5)/(w + 1), (-5)/(w + 1), (3*w - 3)/(7), (-3*w + 3)/(7), (3*w + 3)/(7), (-3*w - 3)/(7)]]

    if d == 21:
        return [cusp(a) for a in [(0)/(1), (w)/(2), (w + 1)/(3), (-w - 1)/(3), (w - 1)/(3), (-w + 1)/(3), (8)/(w), (-8)/(w), (w - 20)/(2*w), (-w + 20)/(2*w), (13)/(2*w), (-13)/(2*w), (w - 8)/(2*w), (-w + 8)/(2*w), (w)/(4), (-w)/(4), (w + 2)/(4), (-w - 2)/(4), (9)/(w - 1), (-9)/(w - 1), (-5)/(w - 1), (5)/(w - 1), (9)/(w + 1), (-9)/(w + 1), (-5)/(w + 1), (5)/(w + 1), (4*w + 4)/(9), (-4*w - 4)/(9), (4*w - 4)/(9), (-4*w + 4)/(9)]]


    if d == 22:
        return [cusp(a) for a in [(0)/(1), (w + 1)/(2), (w)/(3), (-w)/(3), (w + 1)/(3), (-w - 1)/(3), (-w + 1)/(3), (w - 1)/(3), (21)/(2*w), (-21)/(2*w), (4*w)/(9), (-4*w)/(9), (w + 1)/(4), (-w - 1)/(4), (-w + 1)/(4), (w - 1)/(4), (9)/(w), (-9)/(w), (-5)/(w), (5)/(w), (9)/(w - 1), (-9)/(w - 1), (5)/(w - 1), (-5)/(w - 1), (9)/(w + 1), (-9)/(w + 1), (5)/(w + 1), (-5)/(w + 1), (w + 2)/(5), (-w - 2)/(5), (w - 2)/(5), (-w + 2)/(5), (2*w + 1)/(5), (-2*w - 1)/(5), (-2*w + 1)/(5), (2*w - 1)/(5), (w - 5)/(w + 2), (-w + 5)/(w + 2), (w - 9)/(w + 2), (-w + 9)/(w + 2), (w + 9)/(w - 2), (-w - 9)/(w - 2), (w + 5)/(w - 2), (-w - 5)/(w - 2)]]

    if d == 23:
        return [cusp(a) for a in [0, (1+2*w)/4, (-1-2*w)/4,
                                  (1+w)/3, (-1-w)/3, (2-w)/(1+w),
                                  (-2+w)/(1+w), (1+w)/(2-w),
                                  (-1-w)/(2-w), (-3+w)/(2+w),
                                  (3-w)/(2+w), (-2-w)/(3-w),
                                  (2+w)/(3-w)]]

    if d == 31:
        return [cusp(a) for a in [0, (1+2*w)/4, (-1-2*w)/4, w/3,
                                  (-w)/3, (1-w)/3, (-1+w)/3,
                                  (1+w)/3, (-1-w)/3, 3/w, (-3)/w,
                                  3/(1-w), (-3)/(1-w), 3/(1+w),
                                  (-3)/(1+w), 3/(2-w), -3/(2-w),
                                  (-6+w)/(3+w), (6-w)/(3+w),
                                  (5+w)/(4-w), (-5-w)/(4-w)]]

    if d == 47:
        return [cusp(a) for a in [(0)/(1), (w + 1)/(3), (-w - 1)/(3), (5)/(w - 1), (-5)/(w - 1), (5)/(w), (-5)/(w), (2*w - 1)/(4), (-2*w + 1)/(4), (w + 3)/(w - 4), (-w - 3)/(w - 4), (2*w + 3)/(w - 4), (-2*w - 3)/(w - 4), (w - 4)/(w + 3), (-w + 4)/(w + 3), (2*w - 5)/(w + 3), (-2*w + 5)/(w + 3), (2*w - 1)/(6), (-2*w + 1)/(6), (w + 4)/(w - 3), (-w - 4)/(w - 3), (w + 2)/(w - 3), (-w - 2)/(w - 3), (w - 3)/(w + 2), (-w + 3)/(w + 2), (w - 5)/(w + 2), (-w + 5)/(w + 2), (2*w + 1)/(5), (-2*w - 1)/(5), (2*w - 3)/(5), (-2*w + 3)/(5)]]

    if d == 59:
        return [cusp(a) for a in [(0)/(1), (w)/(2), (w - 1)/(2), (w + 1)/(3), (-w - 1)/(3), (4)/(w - 1), (-4)/(w - 1), (4)/(w), (-4)/(w), (w + 5)/(w - 3), (-w - 5)/(w - 3), (w - 6)/(w + 2), (-w + 6)/(w + 2), (2*w - 1)/(6), (-2*w + 1)/(6), (w + 1)/(4), (-w - 1)/(4), (w - 2)/(4), (-w + 2)/(4), (w + 4)/(w - 4), (-w - 4)/(w - 4), (w + 6)/(w - 4), (-w - 6)/(w - 4), (w - 5)/(w + 3), (-w + 5)/(w + 3), (w - 7)/(w + 3), (-w + 7)/(w + 3)]]

    if d == 67:
        return [cusp(a) for a in [0, w/2, (-1+w)/2, w/3, (-w)/3,
                                  (1-w)/3, (-1+w)/3, (1+w)/3, (-1-w)/3, w/4, (-w)/4, (-1+w)/4, (1-w)/4,
                                  (1+w)/4, (-1-w)/4, (2-w)/4, (-2+w)/4, (6+w)/(3-w), (-6-w)/(3-w),
                                  (2+w)/(3-w), (-2-w)/(3-w), (7-w)/(2+w), (-7+w)/(2+w), (3-w)/(2+w),
                                  (-3+w)/(2+w)]]

    if d == 71:
        return [cusp(a) for a in [(0)/(1), (w+1)/(3), (-w-1)/(3),
                                  (2*w-1)/(4), (-2*w+1)/(4), (w+7)/(w-2), (-w-7)/(w-2),
                                  (w-8)/(w+1), (-w+8)/(w+1), (w+4)/(w-3), (-w-4)/(w-3),
                                  (w+2)/(w-3), (-w-2)/(w-3), (w+8)/(w-3), (-w-8)/(w-3),
                                  (w-9)/(w+2), (-w+9)/(w+2), (w-3)/(w+2), (-w+3)/(w+2),
                                  (w-5)/(w+2), (-w+5)/(w+2), (2*w-1)/(6), (-2*w+1)/(6),
                                  (2*w+5)/(w-6), (-2*w-5)/(w-6), (2*w-7)/(w+5), (-2*w+7)/(w+5),
                                  (2*w+1)/(8), (-2*w-1)/(8), (2*w-3)/(8), (-2*w+3)/(8),
                                  (2*w+3)/(8), (-2*w-3)/(8), (2*w-1)/(5), (-2*w+1)/(5),
                                  (7)/(w-1), (-7)/(w-1), (5)/(w-1), (-5)/(w-1), (7)/(w),
                                  (-7)/(w), (5)/(w), (-5)/(w), (w+3)/(w-4), (-w-3)/(w-4),
                                  (-2*w-5)/(w-4), (2*w+5)/(w-4), (w-4)/(w+3), (-w+4)/(w+3),
                                  (-2*w+7)/(w+3), (2*w-7)/(w+3), (w+4)/(w-5), (-w-4)/(w-5),
                                  (-2*w-7)/(w-5), (2*w+7)/(w-5), (w-5)/(w+4), (-w+5)/(w+4),
                                  (-2*w+9)/(w+4), (2*w-9)/(w+4), (w+7)/(w-6), (-w-7)/(w-6),
                                  (w+5)/(w-6), (-w-5)/(w-6), (w-6)/(w+5), (-w+6)/(w+5),
                                  (w-8)/(w+5), (-w+8)/(w+5)]]

    if d == 163:
        return [cusp(a) for a in [0, (w)/2, (-1+w)/2, (w)/3, (-w)/3,
                                  (1-w)/3, (-1+w)/3, (1+w)/3,
                                  (-1-w)/3, (w)/4, (-w)/4,
                                  (-1+w)/4, (1-w)/4, (1+w)/4,
                                  (-1-w)/4, (2-w)/4, (-2+w)/4,
                                  (w)/5, (-w)/5, (-1+w)/5,
                                  (1-w)/5, (2*w)/5, (-2*w)/5,
                                  (2-2*w)/5, (-2+2*w)/5,
                                  (2+w)/5, (-2-w)/5,
                                  (1-2*w)/5, (-1+2*w)/5,
                                  (-2+w)/5, (2-w)/5,
                                  (2+2*w)/5, (-2-2*w)/5,
                                  (1+w)/5, (-1-w)/5,
                                  (1+2*w)/5, (-1-2*w)/5,
                                  (w)/6, (-w)/6, (1-w)/6,
                                  (-1+w)/6, (1+w)/6, (-1-w)/6,
                                  (-2+w)/6, (2-w)/6, (2+w)/6,
                                  (-2-w)/6, (3-w)/6, (-3+w)/6,
                                  (12)/(w), (-12)/(w),
                                  (17)/(w), (-17)/(w),
                                  (12)/(1-w), (-12)/(1-w),
                                  (17)/(1-w), (-17)/(1-w),
                                  (12)/(1+w), (-12)/(1+w),
                                  (-17+w)/(1+w), (17-w)/(1+w),
                                  (12)/(2-w), (-12)/(2-w),
                                  (-16-w)/(2-w), (16+w)/(2-w),
                                  7/(2+w), (-7)/(2+w),
                                  (18-w)/(2+w), (-18+w)/(2+w),
                                  (-11+w)/(2+w), (11-w)/(2+w),
                                  (-16+w)/(2+w), (16-w)/(2+w),
                                  7/(3-w), (-7)/(3-w),
                                  (17+w)/(3-w), (-17-w)/(3-w),
                                  (-10-w)/(3-w), (10+w)/(3-w),
                                  (-15-w)/(3-w), (15+w)/(3-w),
                                  (3+w)/7, (-3-w)/7,
                                  (-1+2*w)/7, (1-2*w)/7,
                                  (1+2*w)/7, (-1-2*w)/7,
                                  (3-2*w)/7, (-3+2*w)/7,
                                  (2+3*w)/7, (-2-3*w)/7,
                                  (5-w)/(3+w), (-5+w)/(3+w),
                                  (-17+w)/(3+w), (17-w)/(3+w),
                                  (4+w)/(4-w), (-4-w)/(4-w),
                                  (-16-w)/(4-w),
                                  (16+w)/(4-w)]]
    print("No precomputed alphas for field {}".format(k))
    return None

